#include "cache.h"
#include <unordered_map>
#include <queue>
#include <vector>
#include <cstdint>
#include <map>
#include <iostream>
#include <cassert>

using namespace std;

static int64_t offset;
static uint64_t prev_addr;
static uint64_t prev_page;

static uint64_t hit_count = 0;
static uint64_t total_count = 0;
static uint64_t total_page_count = 0;
// static int flag = 0;
static uint64_t total_miss_count = 0;
static uint64_t total_page_miss_count = 0;

static std::map<int64_t, int64_t> stride_frequency_on_miss;
static std::map<int64_t, int64_t> stride_frequency_total;

void CACHE::l1d_prefetcher_initialize()
{
    cout << "page_based_offset" << endl;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    assert(addr);
    uint64_t block_addr = addr >> LOG2_BLOCK_SIZE;
    offset = block_addr - prev_addr;
    total_count++;
    uint64_t page_addr = addr >> LOG2_PAGE_SIZE;
    if (prev_page == page_addr)
    {
        total_page_count++;
        stride_frequency_total[offset]++;
    }

    if (!cache_hit)
    {
        total_miss_count++;

        if (prev_page == page_addr)
        {
            stride_frequency_on_miss[offset]++;
            total_page_miss_count++;
        }
    }
    prev_addr = block_addr;
    prev_page = page_addr;
}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}
void print_top_deltas(const std::map<int64_t, int64_t> &delta_frequency, const std::string &title)
{
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    for (const auto &pair : delta_frequency)
    {
        min_heap.push(make_pair(pair.second, pair.first));
        if (min_heap.size() > 100)
        {
            min_heap.pop();
        }
    }

    vector<pair<int64_t, int64_t>> top100;
    while (!min_heap.empty())
    {
        top100.push_back(min_heap.top());
        min_heap.pop();
    }

    std::cout << title << std::endl;
    for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    {
        std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_miss_count << std::endl;
    }
}
void print_top_deltas2(const std::map<int64_t, int64_t> &delta_frequency, const std::string &title)
{
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    for (const auto &pair : delta_frequency)
    {
        min_heap.push(make_pair(pair.second, pair.first));
        if (min_heap.size() > 100)
        {
            min_heap.pop();
        }
    }

    vector<pair<int64_t, int64_t>> top100;
    while (!min_heap.empty())
    {
        top100.push_back(min_heap.top());
        min_heap.pop();
    }

    std::cout << title << std::endl;
    for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    {
        std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_count << std::endl;
    }
}
void CACHE::l1d_prefetcher_final_stats()
{
    cout << "-------------------------------------Main Data---------------------------------------" << endl;
    // std::cout << "Number of hits: " << hit_count << std::endl;
    // std::cout << "Number of total accesses: " << total_count << std::endl;
    // std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
    cout << endl
         << endl;

    // cout << "Total miss Count" << total_miss_count << endl;

    // Print the pairs from the stride_frequency map
    std::cout << "Offset Frequency Stats:" << std::endl;
    cout << "Percentage of same page " << static_cast<double>(total_page_count) / total_count << endl
         << endl;
    cout << "----------------------- top 100 -----------------------" << endl;
    print_top_deltas(stride_frequency_on_miss, "Top 100 offset Frequencies: in page on consecutive accesses on page miss");
    cout << "----------------------- top 100 -----------------------" << endl;
    print_top_deltas2(stride_frequency_total, "Top 100 offset Frequencies: in page on consecutive accesses on total miss");

    cout << "-------------------------------------Main Data---------------------------------------" << endl;
}
