#include "cache.h"
#include <vector>
#include <iostream>
#include <map>

#define TRACE_COUNT_MAX 4096
#define STRIDE_BUFFER_SIZE 4096

// static uint64t_t
static int64_t last_block_addr = 0;
static int64_t stride = 0;
static uint64_t trace_count =0; 
static std::vector<int64_t> stride_buffer(STRIDE_BUFFER_SIZE); 
static size_t stride_buffer_index = 0;

static int64_t stride1 = 0;
static int64_t stride2 = 0;
static int64_t stride3 = 0;
static int64_t stride4 = 0;

static int storer = 0;

int64_t stride_Cal(uint64_t addr){

	// std::cout << "enter in stride cal " << std::endl;


	addr = addr >> (LOG2_BLOCK_SIZE); 
	stride = addr - last_block_addr;
	last_block_addr = addr;
	// std::cout<<"stride " << stride << std::endl;
	return stride;

}



void initial_phase(uint64_t addr, uint64_t ip){

	// std::cout << "enter in intial phase " << std::endl;
	// std::cout << "enter in intial phase 2 " << std::endl;
	// if (stride_buffer.size() == STRIDE_BUFFER_SIZE)
	// {
	// 	return;			
	// }
	// std::cout << "enter in intial phase 3 " << std::endl;
	if (trace_count == 0)		
	{
		last_block_addr = addr >> (LOG2_BLOCK_SIZE);
		trace_count++;
	}
	// std::cout << "enter in intial phase 4 " << std::endl;
	// std::cout << "before calling stride" << std::endl;
	stride_buffer[stride_buffer_index] = stride_Cal(addr);
	// std::cout << "after calling stride "<<stride_buffer[stride_buffer_index] << std::endl;
	stride_buffer_index++;
	trace_count++;
	return;

 }

void CACHE::l1d_prefetcher_initialize() 
{
	stride_buffer.assign(STRIDE_BUFFER_SIZE, 0);
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{

	if (trace_count!=4096)
	{	
		initial_phase(addr,ip);
		// trace_count++;
		return;
	}

	if (storer == 0)
    {
        stride1 = stride_Cal(addr);
        storer = 1; 
    }
    else if (storer == 1)
    {
        stride2 = stride_Cal(addr);
        storer = 2;
    }
    else if (storer == 2)
    {
        stride3 = stride_Cal(addr);
        storer = 3;
    }
    else if (storer == 3)
    {
        stride4 = stride_Cal(addr);
        storer = 0;
    }

	// for (size_t i = 0; i < STRIDE_BUFFER_SIZE - 1; ++i)
    //     {
    //         if ((stride1 == stride_buffer[i] && stride2 == stride_buffer[i + 1])||(stride2 == stride_buffer[i] && stride1 == stride_buffer[i + 1]) )
    //         {
    //             // Match found, issue prefetch for the next two strides
    //             uint64_t prefetch_addr1 = (addr>>(LOG2_BLOCK_SIZE)) + stride_buffer[i+2];
    //             uint64_t prefetch_addr2 = (addr>>(LOG2_BLOCK_SIZE)) + stride_buffer[i+2] + stride_buffer[i+3];
    //             prefetch_line(ip, addr, prefetch_addr1<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
    //             prefetch_line(ip, addr, prefetch_addr2<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
	// 			break;

    //         }
    //     }
	for (size_t i = 0; i < STRIDE_BUFFER_SIZE - 3; ++i)
    {
        if ((stride1 == stride_buffer[i] && stride2 == stride_buffer[i + 1] && stride3 == stride_buffer[i + 2] && stride4 == stride_buffer[i + 3]) ||
            (stride2 == stride_buffer[i] && stride3 == stride_buffer[i + 1] && stride4 == stride_buffer[i + 2] && stride1 == stride_buffer[i + 3]) ||
            (stride3 == stride_buffer[i] && stride4 == stride_buffer[i + 1] && stride1 == stride_buffer[i + 2] && stride2 == stride_buffer[i + 3]) ||
            (stride4 == stride_buffer[i] && stride1 == stride_buffer[i + 1] && stride2 == stride_buffer[i + 2] && stride3 == stride_buffer[i + 3]))
        {
            // Match found, issue prefetch for the next four strides
            uint64_t prefetch_addr1 = (addr >> (LOG2_BLOCK_SIZE) ) + stride_buffer[i+4];
            uint64_t prefetch_addr2 = (addr >> (LOG2_BLOCK_SIZE) ) + stride_buffer[i+4] + stride_buffer[i+5];
            uint64_t prefetch_addr3 = (addr >> (LOG2_BLOCK_SIZE) ) + stride_buffer[i+4] + stride_buffer[i+5] + stride_buffer[i+6];
            uint64_t prefetch_addr4 = (addr >> (LOG2_BLOCK_SIZE) ) + stride_buffer[i+4] + stride_buffer[i+5] + stride_buffer[i+6] + stride_buffer[i+7];
            if (stride_buffer[i+4]<5000)
				prefetch_line(ip, addr, prefetch_addr1<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
            if (stride_buffer[i+5]<5000)
				prefetch_line(ip, addr, prefetch_addr2<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
            // prefetch_line(ip, addr, prefetch_addr3<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
            // prefetch_line(ip, addr, prefetch_addr4<<(LOG2_BLOCK_SIZE), FILL_L1, 0);
            // break; // Exit the loop after issuing prefetch requests
        }
    }


}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{


}

void CACHE::l1d_prefetcher_final_stats()
{

}

