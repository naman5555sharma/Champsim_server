#include "cache.h"
#include <unordered_map>
#include <tuple>
#include <iostream>
#include <algorithm>
#include <array>
#define trace_total_count 500000

static long long int trace_count = 0;
static int sanity = 0;

static int flag = 0;
static int flag1 = 0;
static int reward1 = 0;
static int reward2 = 0;

static int round1 = 0;
static int round2 = 0;

int64_t globalStride1 = 0;
int64_t globalStride2 = 0;
int64_t globalStride3 = 0;

static long long int n_total = 0;
static long long int prefetched = 1; // changed
static long long int matched = 0;

static std::array<uint64_t, 5> prev_addrs = {0, 0, 0, 0, 0}; // CHANGED

#include <unordered_map>
#include <vector>
#include <tuple>

struct TrieNode
{
    std::unordered_map<int64_t, TrieNode *> children;
    int count = 0;                  // Count for last element
    long double maxPotential = 0.0; // Best arm for 3rd element
    long double potential = 0.0;    // Potential for last element

    int numberOfTimesPicked = 1; // Times picked for prefetching

    int reward = 0; // Added

    std::vector<std::pair<std::tuple<int64_t, int64_t>, int>> nextTwoElementsSummary;

    ~TrieNode()
    {
        for (auto &child : children)
        {
            delete child.second;
        }
    }
};

TrieNode *globalGroupRootNode = nullptr; // This remains unchanged
// Updated to hold a pointer to a tuple of the next three elements
std::tuple<int64_t, int64_t> *globalNextTwoElements = nullptr;

TrieNode *globalRootNode = nullptr; // For the third node of [a b c]
// Updated to hold a pointer to a tuple of the next three elements
int64_t *globalNextElement = nullptr;

class GroupTrie
{
private:
    TrieNode *root;

public:
    GroupTrie() : root(new TrieNode()) {}

    ~GroupTrie()
    {
        delete root; // Ensure we clean up memory on destruction
    }

    void update4thNodePotential(TrieNode *node, int depth = 0)
    {
        if (!node)
            return; // Base case

        // At the 6th node (3 levels down from groupRootNode)
        if (depth == 2)
        {
            if (node->numberOfTimesPicked > 0 && node->count > 0 && prefetched > 0)
            {
                node->potential = 0.04 * sqrt(node->count) + 0.04 * sqrt(log(prefetched) / node->numberOfTimesPicked) + node->reward;
                return;
            }
        }

        // Recursive case: Traverse all children
        for (auto &child : node->children)
        {
            update4thNodePotential(child.second, depth + 1);
        }
    }

    void update2ndNode(TrieNode *groupRootNode)
    {
        double maxPotential = 0.0;
        std::tuple<int64_t, int64_t> bestGroup;
        int bestGroupCount = 0;

        // Assuming groupRootNode points to the node for the 3rd element
        for (auto &child1 : groupRootNode->children)
        {
            for (auto &child2 : child1.second->children)
            {

                // Check if this child's (representing the 6th element) potential is the highest found
                if (child2.second->potential > maxPotential)
                {
                    maxPotential = child2.second->potential;
                    bestGroup = std::make_tuple(child1.first, child2.first);
                    bestGroupCount = child2.second->count;
                }
            }
        }

        // Update the groupRootNode with the found best group details
        groupRootNode->maxPotential = maxPotential;
        if (maxPotential > 0)
        {                                                  // Check ensures we have a meaningful update
            groupRootNode->nextTwoElementsSummary.clear(); // Clear existing summaries if needed
            groupRootNode->nextTwoElementsSummary.push_back({bestGroup, bestGroupCount});
        }
    }

    void update3rdNode(TrieNode *groupRootNode)
    {
        double maxPotential = 0.0;
        std::tuple<int64_t, int64_t> bestElement;
        int bestElementCount = 0;

        for (auto &child1 : groupRootNode->children)
        {
            if (child1.second->potential > maxPotential)
            {
                maxPotential = child1.second->potential;
                bestElement = std::make_tuple(child1.first, 0);
                bestElementCount = child1.second->count;
            }
        }

        groupRootNode->maxPotential = maxPotential;
        if (maxPotential > 0)
        {                                                  // Check ensures we have a meaningful update
            groupRootNode->nextTwoElementsSummary.clear(); // Clear existing summaries if needed
            groupRootNode->nextTwoElementsSummary.push_back({bestElement, bestElementCount});
        }
    }

    void insert(const std::tuple<int64_t, int64_t, int64_t, int64_t> &group)
    {
        TrieNode *node = root;
        std::vector<TrieNode *> visitedNodes; // To enable backtracking
        auto [first, second, third, fourth] = group;
        std::array<int64_t, 4> elements = {first, second, third, fourth};

        for (int i = 0; i < elements.size(); ++i)
        {
            int64_t element = elements[i];
            if (node->children.find(element) == node->children.end())
            {
                node->children[element] = new TrieNode();
            }
            visitedNodes.push_back(node); // Add current node to visited for backtracking
            node = node->children[element];
        }
        node->count++;        // Increment the count at the final node
        if (node->count == 1) // Updating number of unique groups
        {
            n_total++;
        }
        if (node->numberOfTimesPicked > 0 && node->count > 0 && prefetched > 0)
            node->potential = 0.04 * sqrt(log(node->count)) + 0.04 * sqrt(log(prefetched) / node->numberOfTimesPicked) + node->reward;

        // std::cout << "Inserted" << std::endl;

        // Update the summary for the third element node with the next three elements
        if (visitedNodes.size() > 2) // Ensure there's a third element node
        {
            TrieNode *secondElementNode = visitedNodes[2]; // Third element is at index 2
            TrieNode *thirdElementNode = visitedNodes[3];
            // std::cout << "Inside if" << std::endl;

            // Check if it's necessary to update the nextTwoElementsSummary
            if (secondElementNode->nextTwoElementsSummary.empty() || secondElementNode->maxPotential <= node->potential)
            {
                // std::cout << "Updating summary" << std::endl;
                secondElementNode->nextTwoElementsSummary = {{std::make_tuple(third, fourth), node->count}};
                secondElementNode->maxPotential = node->potential; // Update the max count for the subtree
            }

            if (thirdElementNode->nextTwoElementsSummary.empty() || thirdElementNode->maxPotential <= node->potential)
            {
                // std::cout << "Updating summary" << std::endl;
                thirdElementNode->nextTwoElementsSummary = {{std::make_tuple(fourth, 0), node->count}};
                thirdElementNode->maxPotential = node->potential; // Update the max count for the subtree
            }
        }
    }

    void nextBestOffsetPair(int64_t firstElement, int64_t secondElement)
    {
        TrieNode *node = root;
        TrieNode *groupRootNode = nullptr;

        // std::cout << "Inside query" << std::endl;

        if (node->children.find(firstElement) != node->children.end())
        {
            node = node->children[firstElement];
            if (node->children.find(secondElement) != node->children.end())
            {
                node = node->children[secondElement];

                groupRootNode = node;

                // std::cout << "Group found" << std::endl;

                if (!node->nextTwoElementsSummary.empty())
                {
                    auto &summary = node->nextTwoElementsSummary[0];
                    if (summary.second > 200) // Check if the count of the group is greater than 100
                    {
                        globalGroupRootNode = groupRootNode;
                        // std::cout << ">100 updating" << std::endl;
                        // Update to hold the tuple of the next three elements
                        delete globalNextTwoElements; // Ensure we clean up any previous allocation

                        // added
                        // std::cout << summary.second << std::endl;

                        globalNextTwoElements = new std::tuple<int64_t, int64_t>(std::get<0>(summary.first), std::get<1>(summary.first));

                        // Reduce numberOfTimesPicked by factor of 0.99 for all groups under groupRootNode
                        // updateNumberOfTimesPicked(groupRootNode);

                        // Increment numberOfTimesPicked for the picked group
                        groupRootNode->children[std::get<0>(summary.first)]->children[std::get<1>(summary.first)]->numberOfTimesPicked++;

                        // ntotal = 0.99 *  ntotal + 1
                        // n_total =  n_total + 1;
                    }
                    else
                    {
                        // Reset global variables if no group meets the condition
                        // std::cout << "<100 so no updating" << std::endl;
                        globalGroupRootNode = nullptr;
                        delete globalNextTwoElements;
                        globalNextTwoElements = nullptr;
                    }
                }
                else
                {
                    // No next elements summary available
                    // std::cout << "no summary" << std::endl;
                    globalGroupRootNode = nullptr;
                    delete globalNextTwoElements;
                    globalNextTwoElements = nullptr;
                }
            }

            else
            {
                // Second element not found
                // std::cout << "not found 2" << std::endl;
                globalGroupRootNode = nullptr;
                delete globalNextTwoElements;
                globalNextTwoElements = nullptr;
            }
        }
        else
        {
            // First element not found
            // std::cout << "not found 1" << std::endl;
            globalGroupRootNode = nullptr;
            delete globalNextTwoElements;
            globalNextTwoElements = nullptr;
        }
    }

    void nextBestOffset(int64_t firstElement, int64_t secondElement, int64_t thirdElement)
    {
        TrieNode *node = root;
        TrieNode *groupRootNode = nullptr;

        // std::cout << "Inside query" << std::endl;

        if (node->children.find(firstElement) != node->children.end())
        {
            node = node->children[firstElement];
            if (node->children.find(secondElement) != node->children.end())
            {
                node = node->children[secondElement];
                if (node->children.find(thirdElement) != node->children.end())
                {
                    node = node->children[thirdElement];
                    groupRootNode = node;

                    // std::cout << "Group found" << std::endl;

                    if (!node->nextTwoElementsSummary.empty())
                    {
                        auto &summary = node->nextTwoElementsSummary[0];
                        if (summary.second > 200) // Check if the count of the group is greater than 100
                        {
                            globalRootNode = groupRootNode;
                            // std::cout << ">100 updating" << std::endl;
                            // Update to hold the tuple of the next three elements
                            delete globalNextElement; // Ensure we clean up any previous allocation

                            // added
                            // std::cout << summary.second << std::endl;

                            *globalNextElement = std::get<0>(summary.first);

                            // Reduce numberOfTimesPicked by factor of 0.99 for all groups under groupRootNode
                            // updateNumberOfTimesPicked(groupRootNode);

                            // Increment numberOfTimesPicked for the picked group
                            groupRootNode->children[std::get<0>(summary.first)]->numberOfTimesPicked++;

                            // ntotal = 0.99 *  ntotal + 1
                            // n_total =  n_total + 1;
                        }
                        else
                        {
                            // Reset global variables if no group meets the condition
                            // std::cout << "<100 so no updating" << std::endl;
                            globalRootNode = nullptr;
                            delete globalNextElement;
                            globalNextElement = nullptr;
                        }
                    }
                    else
                    {
                        // No next elements summary available
                        // std::cout << "no summary" << std::endl;
                        globalRootNode = nullptr;
                        delete globalNextElement;
                        globalNextElement = nullptr;
                    }
                }
                else
                {
                    globalRootNode = nullptr;
                    delete globalNextElement;
                    globalNextElement = nullptr;
                }
            }

            else
            {
                // Second element not found
                // std::cout << "not found 2" << std::endl;
                globalRootNode = nullptr;
                delete globalNextElement;
                globalNextElement = nullptr;
            }
        }
        else
        {
            // First element not found
            // std::cout << "not found 1" << std::endl;
            globalRootNode = nullptr;
            delete globalNextElement;
            globalNextElement = nullptr;
        }
    }

    void
    incrementReward(TrieNode *groupRootNode, const std::tuple<int64_t, int64_t> &nextTwoElements)
    {
        if (!groupRootNode)
            return;

        // Update to handle the three elements following the initial group
        std::array<int64_t, 2> elements = {std::get<0>(nextTwoElements), std::get<1>(nextTwoElements)};
        // std::vector<TrieNode *> path;

        TrieNode *node = groupRootNode;
        for (int64_t element : elements)
        {
            if (node->children.find(element) == node->children.end())
            {
                // The complete group does not exist
                return;
            }
            // path.push_back(node); // Track the path for updating ancestors
            node = node->children[element];
        }
        node->reward++; // Increment the count at the final node of the group
        // std::cout << "Incremented" << std::endl;

        // // Update maxPotential for all ancestor nodes
        // for (TrieNode *ancestor : path)
        // {
        //     ancestor->maxPotential = std::max(ancestor->maxPotential, node->count);
        // }
    }

    void
    incrementReward2(TrieNode *groupRootNode, int64_t nextElement)
    {
        if (!groupRootNode)
            return;

        TrieNode *node = groupRootNode;

        if (node->children.find(nextElement) == node->children.end())
        {
            return;
        }

        node->children[nextElement]->reward++;
    }

    void decrementReward(TrieNode *groupRootNode, const std::tuple<int64_t, int64_t> &nextTwoElements)
    {
        if (!groupRootNode)
            return;

        // Update to handle the three elements following the initial group
        std::array<int64_t, 2> elements = {std::get<0>(nextTwoElements), std::get<1>(nextTwoElements)};
        // std::vector<TrieNode *> path;

        TrieNode *node = groupRootNode;
        for (int64_t element : elements)
        {
            if (node->children.find(element) == node->children.end())
            {
                // The complete group does not exist
                return;
            }
            // path.push_back(node); // Track the path for updating ancestors
            node = node->children[element];
        }

        // Decrement the count at the final node of the group
        if (node->count > 0)
        { // Ensure the count doesn't go negative
            node->reward--;
        }
        // std::cout << "Decremented" << std::endl;

        // Update maxPotential for all ancestor nodes, including the last
        // for (TrieNode *ancestor : path)
        // {
        //     if (ancestor->maxPotential > 0)
        //     {
        //         ancestor->maxPotential = std::max(ancestor->maxPotential, node->count);
        //     }
        // }
    }

    void decrementReward2(TrieNode *groupRootNode, int64_t nextElement)
    {
        if (!groupRootNode)
            return;

        TrieNode *node = groupRootNode;

        if (node->children.find(nextElement) == node->children.end())
        {
            return;
        }

        if (node->children[nextElement]->count > 0)
        {
            node->children[nextElement]->reward--;
        }
    }
};

GroupTrie trie;

void CACHE::l1d_prefetcher_initialize()
{
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{

    // Inserting into trie
    if (trace_count <= trace_total_count)
    {
        uint64_t temp_addr = addr >> LOG2_BLOCK_SIZE;

        // Update and rotate previous addresses
        std::rotate(prev_addrs.begin(), prev_addrs.begin() + 1, prev_addrs.end());
        prev_addrs.back() = temp_addr;

        // Check if we have enough addresses to calculate differences
        if (prev_addrs[0] != 0 && trace_count >= 4) // CHANGED
        {
            // Calculate differences
            auto diff = std::make_tuple(
                prev_addrs[1] - prev_addrs[0],
                prev_addrs[2] - prev_addrs[1],
                prev_addrs[3] - prev_addrs[2],
                prev_addrs[4] - prev_addrs[3]); // CHANGED
            if ((prev_addrs[1] - prev_addrs[0]) != 0 || (prev_addrs[2] - prev_addrs[1]) != 0 || (prev_addrs[3] - prev_addrs[2]) != 0 || (prev_addrs[4] - prev_addrs[3]) != 0)
            {
                trie.insert(diff);
            }

            // std:: cout << "Inserting" << std:: endl;
            // Use GroupTrie insert method directly for updating or inserting the difference group
        }

        trace_count++;

        return;
    }

    // Make trace count = 0
    if (flag1 == 0)
    {
        trace_count = 0;
        flag1 = 1;
    }

    static uint64_t temp1 = 0;
    static uint64_t temp2 = 0;
    static uint64_t temp3 = 0;
    static uint64_t temp4 = 0;

    static int64_t stride1 = 0;
    static int64_t stride2 = 0;
    static int64_t stride3 = 0;
    static int64_t stride4 = 0;

    static uint64_t temp_addr = 0;

    static uint64_t prefetch1 = 0;
    static uint64_t prefetch2 = 0;

    // Round Robin for [a b] -> [c d]

    if (round1 == 0)
    {
        if (trace_count <= trace_total_count)
        {
            if (sanity == 0)
            {
                if (temp1 == 0)
                {
                    temp1 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }
                else if (temp2 == 0)
                {
                    temp2 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }
                else
                {
                    temp_addr = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    stride1 = temp2 - temp1;
                    stride2 = temp_addr - temp2;

                    temp1 = temp_addr;
                    temp3 = temp_addr; // change

                    temp2 = 0;
                    sanity = 1;
                }

                if (flag == 1)
                {
                    if ((stride1 == std::get<0>(*globalNextTwoElements) && globalNextTwoElements != nullptr) && (stride2 == std::get<1>(*globalNextTwoElements) && globalNextTwoElements != nullptr))
                    {
                        // std::cout << "Match Found" << std::endl;
                        matched++;
                        reward1++;
                        trie.incrementReward(globalGroupRootNode, *globalNextTwoElements);
                        if (globalStride1 != 0 || globalStride2 != 0 || stride1 != 0 || stride2 != 0)
                        {
                            trie.insert(std::make_tuple(globalStride1, globalStride2, stride1, stride2));
                        }
                        // update potential
                        trie.update4thNodePotential(globalGroupRootNode, 0);

                        // update maxPotential and nextTwoElementsummary
                        trie.update2ndNode(globalGroupRootNode);
                    }

                    else
                    {
                        trie.decrementReward(globalGroupRootNode, *globalNextTwoElements);
                        // std::cout << "Not found" << std::endl;
                        if (globalStride1 != 0 || globalStride2 != 0 || stride1 != 0 || stride2 != 0)
                        {
                            trie.insert(std::make_tuple(globalStride1, globalStride2, stride1, stride2));
                        }

                        // update potential
                        trie.update4thNodePotential(globalGroupRootNode, 0);

                        // update maxPotential and nextTwoElementsummary
                        trie.update2ndNode(globalGroupRootNode);
                    }
                }
            }

            if (sanity == 2)
            {
                if (temp3 == 0)
                {
                    temp3 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }
                else if (temp4 == 0)
                {
                    temp4 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }
                else
                {
                    temp_addr = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    stride3 = temp4 - temp3;
                    stride4 = temp_addr - temp4;

                    temp3 = temp_addr;
                    temp1 = temp_addr;

                    temp4 = 0;

                    if (globalStride1 != 0 || globalStride2 != 0 || stride3 != 0 || stride4 != 0)
                    {
                        trie.insert(std::make_tuple(globalStride1, globalStride2, stride3, stride4));
                    }
                    // std:: cout << "Inserting" << std::endl;

                    stride1 = stride3;
                    stride2 = stride4;
                    sanity = 1;
                }
            }

            if (sanity == 1)
            {

                globalStride1 = stride1;
                globalStride2 = stride2;
                trie.nextBestOffsetPair(stride1, stride2);

                // std:: cout << globalGroupRootNode << std::endl;
                // std:: cout << globalNextElements << std::endl;

                if (globalGroupRootNode != nullptr && globalNextTwoElements != nullptr)
                {
                    int64_t nextElement1 = std::get<0>(*globalNextTwoElements);
                    int64_t nextElement2 = std::get<1>(*globalNextTwoElements);

                    // std::cout << "Prefetched : " << nextElement1 << " " << nextElement2 << " " << nextElement3 << std::endl;
                    // Use nextElement1 and nextElement2 as needed

                    prefetch1 = temp_addr + nextElement1;
                    prefetch2 = temp_addr + nextElement1 + nextElement2;

                    prefetch1 = prefetch1 << LOG2_BLOCK_SIZE;
                    prefetch2 = prefetch2 << LOG2_BLOCK_SIZE;

                    // std::cout << "Prefetching" << std::endl;
                    prefetch_line(ip, addr, prefetch1, FILL_L1, 0);
                    prefetch_line(ip, addr, prefetch2, FILL_L1, 0);

                    // std::cout << "(" << globalStride1 << ", " << globalStride2 << ", " << globalStride3 << ", " << nextElement1 << ", " << nextElement2 << ", " << nextElement3 << ")   " << globalGroupRootNode->nextTwoElementsSummary[0].second << "    " << globalGroupRootNode->maxPotential << std::endl;
                    prefetched++;

                    sanity = 0;
                    flag = 1;
                }
                else
                {
                    sanity = 2;
                }
            }
        }
        else
        {
            round1 = 1;
            round2 = 1;
            trace_count = 0;
        }
    }

    // reset all variables to 0
     temp1 = 0;
     temp2 = 0;
     temp3 = 0;
     temp4 = 0;

    stride1 = 0;
    stride2 = 0;
    stride3 = 0;
    stride4 = 0;

     temp_addr = 0;

     prefetch1 = 0;
     prefetch2 = 0;


    // Round Robin for [a b c] -> [d]
    if (round2 == 1)
    {
        if (trace_count <= trace_total_count)
        {
            if (sanity == 0)
            {
                if (temp1 == 0)
                {
                    temp1 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }
                else if (temp2 == 0)
                {
                    temp2 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;

                    if (flag == 1)
                    {
                        if ((((temp2 - temp1) == *globalNextElement) && globalNextElement != nullptr))
                        {
                            // std::cout << "Match Found" << std::endl;
                            matched++;
                            reward2++;
                            trie.incrementReward2(globalRootNode, *globalNextElement);

                            trie.update4thNodePotential(globalGroupRootNode, 0);

                            // update maxPotential and nextTwoElementsummary
                            trie.update2ndNode(globalRootNode);
                        }

                        else
                        {
                            trie.decrementReward2(globalRootNode, *globalNextElement);
                            // std::cout << "Not found" << std::endl;

                            // update potential
                            trie.update4thNodePotential(globalGroupRootNode, 0);

                            // update maxPotential and nextTwoElementsummary
                            trie.update2ndNode(globalGroupRootNode);
                        }
                    }

                    return;
                }
                else if (temp3 == 0)
                {
                    temp3 = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    return;
                }

                else
                {
                    temp_addr = addr >> LOG2_BLOCK_SIZE;
                    trace_count++;
                    stride1 = temp2 - temp1;
                    stride2 = temp3 - temp2;
                    stride3 = temp_addr - temp3;

                    temp1 = temp_addr;

                    temp2 = 0;
                    temp3 = 0;

                    sanity = 1;
                }
            }

            if (sanity == 2)
            {

                temp_addr = addr >> LOG2_BLOCK_SIZE;
                trace_count++;

                temp1 = temp_addr;

                if (stride1 != 0 || stride2 != 0 || stride3 != 0 || temp_addr - temp1 != 0)
                {
                    trie.insert(std::make_tuple(stride1, stride2, stride3, temp_addr - temp1));
                }
                // std:: cout << "Inserting" << std::endl;

                sanity = 0;
            }

            if (sanity == 1)
            {

                globalStride1 = stride1;
                globalStride2 = stride2;
                globalStride2 = stride3;
                trie.nextBestOffset(stride1, stride2, stride3);

                // std:: cout << globalGroupRootNode << std::endl;
                // std:: cout << globalNextElements << std::endl;

                if (globalRootNode != nullptr && globalNextElement != nullptr)
                {
                    int64_t nextElement1 = *globalNextElement;
                    // std::cout << "Prefetched : " << nextElement1 << " " << nextElement2 << " " << nextElement3 << std::endl;
                    // Use nextElement1 and nextElement2 as needed

                    prefetch1 = temp_addr + nextElement1;

                    prefetch1 = prefetch1 << LOG2_BLOCK_SIZE;

                    // std::cout << "Prefetching" << std::endl;
                    prefetch_line(ip, addr, prefetch1, FILL_L1, 0);

                    // std::cout << "(" << globalStride1 << ", " << globalStride2 << ", " << globalStride3 << ", " << nextElement1 << ", " << nextElement2 << ", " << nextElement3 << ")   " << globalGroupRootNode->nextTwoElementsSummary[0].second << "    " << globalGroupRootNode->maxPotential << std::endl;
                    prefetched++;

                    sanity = 0;
                    flag = 1;
                }
                else
                {
                    flag = 0;
                    sanity = 2;
                }
            }
        }
        else
        {
            round1 = 1;
            round2 = 0;
        }
    }

    if (reward1 > reward2)
    {
        if (sanity == 0)
        {
            if (temp1 == 0)
            {
                temp1 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }
            else if (temp2 == 0)
            {
                temp2 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }
            else
            {
                temp_addr = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                stride1 = temp2 - temp1;
                stride2 = temp_addr - temp2;

                temp1 = temp_addr;
                temp3 = temp_addr; // change

                temp2 = 0;
                sanity = 1;
            }

            if (flag == 1)
            {
                if ((stride1 == std::get<0>(*globalNextTwoElements) && globalNextTwoElements != nullptr) && (stride2 == std::get<1>(*globalNextTwoElements) && globalNextTwoElements != nullptr))
                {
                    // std::cout << "Match Found" << std::endl;
                    matched++;
                    reward1++;
                    trie.incrementReward(globalGroupRootNode, *globalNextTwoElements);
                    if (globalStride1 != 0 || globalStride2 != 0 || stride1 != 0 || stride2 != 0)
                    {
                        trie.insert(std::make_tuple(globalStride1, globalStride2, stride1, stride2));
                    }
                    // update potential
                    trie.update4thNodePotential(globalGroupRootNode, 0);

                    // update maxPotential and nextTwoElementsummary
                    trie.update2ndNode(globalGroupRootNode);
                }

                else
                {
                    trie.decrementReward(globalGroupRootNode, *globalNextTwoElements);
                    // std::cout << "Not found" << std::endl;
                    if (globalStride1 != 0 || globalStride2 != 0 || stride1 != 0 || stride2 != 0)
                    {
                        trie.insert(std::make_tuple(globalStride1, globalStride2, stride1, stride2));
                    }

                    // update potential
                    trie.update4thNodePotential(globalGroupRootNode, 0);

                    // update maxPotential and nextTwoElementsummary
                    trie.update2ndNode(globalGroupRootNode);
                }
            }
        }

        if (sanity == 2)
        {
            if (temp3 == 0)
            {
                temp3 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }
            else if (temp4 == 0)
            {
                temp4 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }
            else
            {
                temp_addr = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                stride3 = temp4 - temp3;
                stride4 = temp_addr - temp4;

                temp3 = temp_addr;
                temp1 = temp_addr;

                temp4 = 0;

                if (globalStride1 != 0 || globalStride2 != 0 || stride3 != 0 || stride4 != 0)
                {
                    trie.insert(std::make_tuple(globalStride1, globalStride2, stride3, stride4));
                }
                // std:: cout << "Inserting" << std::endl;

                stride1 = stride3;
                stride2 = stride4;
                sanity = 1;
            }
        }

        if (sanity == 1)
        {

            globalStride1 = stride1;
            globalStride2 = stride2;
            trie.nextBestOffsetPair(stride1, stride2);

            // std:: cout << globalGroupRootNode << std::endl;
            // std:: cout << globalNextElements << std::endl;

            if (globalGroupRootNode != nullptr && globalNextTwoElements != nullptr)
            {
                int64_t nextElement1 = std::get<0>(*globalNextTwoElements);
                int64_t nextElement2 = std::get<1>(*globalNextTwoElements);

                // std::cout << "Prefetched : " << nextElement1 << " " << nextElement2 << " " << nextElement3 << std::endl;
                // Use nextElement1 and nextElement2 as needed

                prefetch1 = temp_addr + nextElement1;
                prefetch2 = temp_addr + nextElement1 + nextElement2;

                prefetch1 = prefetch1 << LOG2_BLOCK_SIZE;
                prefetch2 = prefetch2 << LOG2_BLOCK_SIZE;

                // std::cout << "Prefetching" << std::endl;
                prefetch_line(ip, addr, prefetch1, FILL_L1, 0);
                prefetch_line(ip, addr, prefetch2, FILL_L1, 0);

                // std::cout << "(" << globalStride1 << ", " << globalStride2 << ", " << globalStride3 << ", " << nextElement1 << ", " << nextElement2 << ", " << nextElement3 << ")   " << globalGroupRootNode->nextTwoElementsSummary[0].second << "    " << globalGroupRootNode->maxPotential << std::endl;
                prefetched++;

                sanity = 0;
                flag = 1;
            }
            else
            {
                sanity = 2;
            }
        }
    }

    else
    {
        if (sanity == 0)
        {
            if (temp1 == 0)
            {
                temp1 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }
            else if (temp2 == 0)
            {
                temp2 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;

                if (flag == 1)
                {
                    if ((((temp2 - temp1) == *globalNextElement) && globalNextElement != nullptr))
                    {
                        // std::cout << "Match Found" << std::endl;
                        matched++;
                        reward2++;
                        trie.incrementReward2(globalRootNode, *globalNextElement);

                        trie.update4thNodePotential(globalGroupRootNode, 0);

                        // update maxPotential and nextTwoElementsummary
                        trie.update2ndNode(globalRootNode);
                    }

                    else
                    {
                        trie.decrementReward2(globalRootNode, *globalNextElement);
                        // std::cout << "Not found" << std::endl;

                        // update potential
                        trie.update4thNodePotential(globalGroupRootNode, 0);

                        // update maxPotential and nextTwoElementsummary
                        trie.update2ndNode(globalGroupRootNode);
                    }
                }

                return;
            }
            else if (temp3 == 0)
            {
                temp3 = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                return;
            }

            else
            {
                temp_addr = addr >> LOG2_BLOCK_SIZE;
                trace_count++;
                stride1 = temp2 - temp1;
                stride2 = temp3 - temp2;
                stride3 = temp_addr - temp3;

                temp1 = temp_addr;

                temp2 = 0;
                temp3 = 0;

                sanity = 1;
            }
        }

        if (sanity == 2)
        {

            temp_addr = addr >> LOG2_BLOCK_SIZE;
            trace_count++;

            temp1 = temp_addr;

            if (stride1 != 0 || stride2 != 0 || stride3 != 0 || temp_addr - temp1 != 0)
            {
                trie.insert(std::make_tuple(stride1, stride2, stride3, temp_addr - temp1));
            }
            // std:: cout << "Inserting" << std::endl;

            sanity = 0;
        }

        if (sanity == 1)
        {

            globalStride1 = stride1;
            globalStride2 = stride2;
            globalStride2 = stride3;
            trie.nextBestOffset(stride1, stride2, stride3);

            // std:: cout << globalGroupRootNode << std::endl;
            // std:: cout << globalNextElements << std::endl;

            if (globalRootNode != nullptr && globalNextElement != nullptr)
            {
                int64_t nextElement1 = *globalNextElement;
                // std::cout << "Prefetched : " << nextElement1 << " " << nextElement2 << " " << nextElement3 << std::endl;
                // Use nextElement1 and nextElement2 as needed

                prefetch1 = temp_addr + nextElement1;

                prefetch1 = prefetch1 << LOG2_BLOCK_SIZE;

                // std::cout << "Prefetching" << std::endl;
                prefetch_line(ip, addr, prefetch1, FILL_L1, 0);

                // std::cout << "(" << globalStride1 << ", " << globalStride2 << ", " << globalStride3 << ", " << nextElement1 << ", " << nextElement2 << ", " << nextElement3 << ")   " << globalGroupRootNode->nextTwoElementsSummary[0].second << "    " << globalGroupRootNode->maxPotential << std::endl;
                prefetched++;

                sanity = 0;
                flag = 1;
            }
            else
            {
                flag = 0;
                sanity = 2;
            }
        }
    
}

}
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{

#ifdef TRACE_DUMP
    cout << "FILL:  CL Addr: " << (addr >> LOG2_BLOCK_SIZE) << "  Prefetch: " << unsigned(prefetch) << "  Cycle: " << current_core_cycle[cpu] << endl;
#endif
}

void CACHE::l1d_prefetcher_final_stats()
{
    std::cout << "Completed " << std::endl;
    std::cout << "Accuracy : " << (static_cast<double>(matched) / prefetched) * 100 << std::endl;
    std::cout << "Number of unique groups: " << n_total << std::endl;
}
