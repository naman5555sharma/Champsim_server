#include "cache.h"

#include <map>

static int64_t stride;
static uint64_t prev_addr;

static uint64_t hit_count = 0;

static uint64_t total_count = 0;
static int flag = 0;

void CACHE::l1d_prefetcher_initialize()
{
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
assert(addr);
if (flag == 0)
{
prev_addr = addr >> LOG2_BLOCK_SIZE;
flag = 1;
return;
}

uint64_t current_addr = addr;
uint64_t block_addr = addr >> LOG2_BLOCK_SIZE;
stride = block_addr - prev_addr;
prev_addr = block_addr;
// uint64_t ip = ip;


std::cout << "Cycle : " << current_core_cycle[0] << " IP "<<ip <<" Addr: " << current_addr << " Block addr: " << block_addr << " Stride: " << stride << " Cache hit: " << (cache_hit?1:0) << std::endl;

if (cache_hit)
{
hit_count++;
total_count++;
}
else
total_count++;
}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_final_stats()
{
std::cout << "Number of hits: " << hit_count << std::endl;
std::cout << "Number of total accesses: " << total_count << std::endl;
std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
}