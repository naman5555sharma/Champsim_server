#include "cache.h"
#include <unordered_map>
#include <tuple>
#include <iostream>

#include <map>

static int64_t stride;
static uint64_t prev_addr;

static uint64_t hit_count = 0;

static uint64_t total_count = 0;
static int flag = 0;
static std::unordered_map<std::tuple<int, int, int>, int> differenceCounts;

void CACHE::l1d_prefetcher_initialize()
{
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{

    assert(addr);
    static uint64_t prev_addr1 = 0;
    static uint64_t prev_addr2 = 0;
    static uint64_t prev_addr3 = 0;

    if (prev_addr1 != 0 && prev_addr2 != 0 && prev_addr3 != 0)
    {
        // Calculate differences
        std::tuple<int, int, int> diff = std::make_tuple(prev_addr2 - prev_addr1, prev_addr3 - prev_addr2, addr - prev_addr3);

        // Check if the difference group exists in the map
        auto it = differenceCounts.find(diff);
        if (it != differenceCounts.end())
        {
            // Increment count for the difference group
            it->second++;
        }
        else
        {
            // Insert the difference group into the map with a count of 1
            differenceCounts[diff] = 1;
        }

        prev_addr1 = prev_addr2;
        prev_addr2 = prev_addr3;
        prev_addr3 = addr;
        return;
    }
    else if (prev_addr1 == 0)
    {
        prev_addr1 = addr >> LOG2_BLOCK_SIZE;
        return;
    }
    else if (prev_addr2 == 0)
    {
        prev_addr2 = addr >> LOG2_BLOCK_SIZE;
        return;
    }
    else
    {
        prev_addr3 = addr >> LOG2_BLOCK_SIZE;
        return;
    }
}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_final_stats()
{
    std::cout << "Difference Counts: " << std::endl;
    for (const auto&  pair : differenceCounts)
    {
        std::cout << "(" << std::get<0>(pair.first) << ", " << std::get<1>(pair.first) << ", " << std::get<2>(pair.first) << "): " << pair.second << std::endl;
        std::cout << std::endl;
    }

 
}
