#include "cache.h"

#define IP_TRACKER_COUNT 24
#define PREFETCH_DEGREE 3
#define MASK_IP 0xFF

// naman
// static std::map<int64_t, int64_t> stride_frequency_on_miss;
// static std::map<int64_t, int64_t> stride_frequency;
static std::map<int64_t, int64_t> local_stride_frequency;
static int64_t delta;
static int64_t prev_addr;
static uint64_t total_miss_count = 0;
static uint64_t hit_count = 0;
static uint64_t total_count = 0;
// naman

class IP_TRACKER
{
public:
    // the IP we're tracking
    uint64_t ip;

    // the last address accessed by this IP
    uint64_t last_cl_addr;

    // the stride between the last two addresses accessed by this IP
    int64_t last_stride;

    // use LRU to evict old IP trackers
    uint32_t lru;

    IP_TRACKER()
    {
        ip = 0;
        last_cl_addr = 0;
        last_stride = 0;
        lru = 0;
    };
};

IP_TRACKER trackers[IP_TRACKER_COUNT];

void CACHE::l1d_prefetcher_initialize()
{
    cout << "CPU " << cpu << " local_delta_pattern" << endl;
    for (int i = 0; i < IP_TRACKER_COUNT; i++)
        trackers[i].lru = i;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{

    // naman
    uint64_t block_addr = addr >> LOG2_BLOCK_SIZE;
    delta = block_addr - prev_addr;
    prev_addr = block_addr;
    if (!cache_hit)
    {
        stride_frequency_on_miss[delta]++;
        total_miss_count++;
    }
    if (cache_hit)
    {
        hit_count++;
        total_count++;
    }
    else
        total_count++;

    // naman

    // check for a tracker hit
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    ip = ip & MASK_IP;

    int index = -1;
    for (index = 0; index < IP_TRACKER_COUNT; index++)
    {
        if (trackers[index].ip == ip)
            break;
    }

    // this is a new IP that doesn't have a tracker yet, so allocate one
    if (index == IP_TRACKER_COUNT)
    {

        for (index = 0; index < IP_TRACKER_COUNT; index++)
        {
            if (trackers[index].lru == (IP_TRACKER_COUNT - 1))
                break;
        }

        trackers[index].ip = ip;
        trackers[index].last_cl_addr = cl_addr;
        trackers[index].last_stride = 0;

        // cout << "[IP_STRIDE] MISS index: " << index << " lru: " << trackers[index].lru << " ip: " << hex << ip << " cl_addr: " << cl_addr << dec << endl;
        for (int i = 0; i < IP_TRACKER_COUNT; i++)
        {
            if (trackers[i].lru < trackers[index].lru)
                trackers[i].lru++;
        }
        trackers[index].lru = 0;

        return; // metadata_in;
    }

    // sanity check
    // at this point we should know a matching tracker index
    if (index == -1)
        assert(0);

    // calculate the stride between the current address and the last address
    // this bit appears overly complicated because we're calculating
    // differences between unsigned address variables
    int64_t stride = 0;
    if (cl_addr > trackers[index].last_cl_addr)
        stride = cl_addr - trackers[index].last_cl_addr;
    else
    {
        stride = trackers[index].last_cl_addr - cl_addr;
        stride *= -1;
    }

    // cout << "[IP_STRIDE] HIT  index: " << index << " lru: " << trackers[index].lru << " ip: " << hex << ip << " cl_addr: " << cl_addr << dec << " stride: " << stride << endl;

    // don't do anything if we somehow saw the same address twice in a row
    if (stride == 0)
        return; // metadata_in;

    // only do any prefetching if there's a pattern of seeing the same
    // stride more than once
    if (stride == trackers[index].last_stride)
    {
        stride_frequency[stride]++;
        // do some prefetching
        for (int i = 0; i < PREFETCH_DEGREE; i++)
        {
            uint64_t pf_address = (cl_addr + (stride * (i + 1))) << LOG2_BLOCK_SIZE;

            // only issue a prefetch if the prefetch address is in the same 4 KB page
            // as the current demand access address
            if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                break;

            // check the MSHR occupancy to decide if we're going to prefetch to the L1 or L2
            if (MSHR.occupancy < (MSHR.SIZE >> 1))
                prefetch_line(ip, addr, pf_address, FILL_L1, 0);
            else
                prefetch_line(ip, addr, pf_address, FILL_L2, 0);
        }
    }

    trackers[index].last_cl_addr = cl_addr;
    trackers[index].last_stride = stride;

    for (int i = 0; i < IP_TRACKER_COUNT; i++)
    {
        if (trackers[i].lru < trackers[index].lru)
            trackers[i].lru++;
    }
    trackers[index].lru = 0;
    return; // metadata_in;
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
    return; // metadata_in;
}
//naman
void print_top_deltas(const std::map<int64_t, int64_t> &delta_frequency, const std::string &title)
{
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    for (const auto &pair : delta_frequency)
    {
        min_heap.push(make_pair(pair.second, pair.first));
        if (min_heap.size() > 100)
        {
            min_heap.pop();
        }
    }

    vector<pair<int64_t, int64_t>> top100;
    while (!min_heap.empty())
    {
        top100.push_back(min_heap.top());
        min_heap.pop();
    }

    std::cout << title << std::endl;
    for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    {
        std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_count << std::endl;
    }
}
//naman
void CACHE::l1d_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1D PC-based stride prefetcher final stats" << endl;
    cout << "Degree: " << PREFETCH_DEGREE << endl;

    // naman
    cout << "-------------------------------------Main Data---------------------------------------" << endl;
    std::cout << "Number of hits: " << hit_count << std::endl;
    std::cout << "Number of total accesses: " << total_count << std::endl;
    std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
    cout << endl
         << endl;

    cout << "Total miss Count" << total_miss_count << endl;

    // Print the pairs from the stride_frequency map
    std::cout << "Stride Frequency Stats:" << std::endl;

    // Use a min-heap to find the top 100 frequencies
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    for (const auto &pair : stride_frequency_on_miss)
    {
        min_heap.push(make_pair(pair.second, pair.first));
        if (min_heap.size() > 100)
        {
            min_heap.pop();
        }
    }

    vector<pair<int64_t, int64_t>> top100;
    while (!min_heap.empty())
    {
        top100.push_back(min_heap.top());
        min_heap.pop();
    }

    // Print top 100 frequencies
    std::cout << "Top 100 Stride Frequencies:" << std::endl;
    for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    {
        std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_miss_count << std::endl;
    }

        cout << "----------------------- top 100 -----------------------" << endl;
    print_top_deltas(stride_frequency, "Top 100 offset Frequencies:");


    cout << "-------------------------------------Main Data---------------------------------------" << endl;
    // naman
}
