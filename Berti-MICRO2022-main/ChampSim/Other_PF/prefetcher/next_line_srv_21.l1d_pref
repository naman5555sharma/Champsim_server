#include "cache.h"

// naman
static std::map<int64_t, int64_t> stride_frequency;
static int64_t delta;
static int64_t prev_addr;
static uint64_t total_miss_count = 0;
static uint64_t hit_count = 0;
static uint64_t total_count = 0;
static int delta1 = -2;
static int delta2 = 2;
static int delta3 = 1;
static int delta4 = -16;
static int delta5 = -32;
// naman

void CACHE::l1d_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L1D next line prefetcher" << endl;
    // int delta1,delta2,delta3,delta4,delta5;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag , uint64_t full_physical_address)
{
    // cout << "address in prefetcher vr "<< hex <<addr<<endl;
    // cout << "address in prefetcher physical "<< hex <<full_physical_address<<endl;
        // Setting delta values 1,-1,2,0,-2,4
    delta1 = -2,
    delta2 = 2,
    delta3 = 1,
    delta4 = 4,
    delta5 = -1;
    uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + delta1) << LOG2_BLOCK_SIZE;
    uint64_t pf_addr1 = ((addr >> LOG2_BLOCK_SIZE) + delta2) << LOG2_BLOCK_SIZE;
    uint64_t pf_addr2 = ((addr >> LOG2_BLOCK_SIZE) + delta3) << LOG2_BLOCK_SIZE;
    uint64_t pf_addr3 = ((addr >> LOG2_BLOCK_SIZE) + delta4) << LOG2_BLOCK_SIZE;
    uint64_t pf_addr4 = ((addr >> LOG2_BLOCK_SIZE) + delta5) << LOG2_BLOCK_SIZE;
    // cout << "prefetch addresses " << pf_addr <<endl;//" "<< pf_addr1 <<" "<< pf_addr2 <<" "<< pf_addr3 <<" " << endl; 
    // DP(if (warmup_complete[cpu]) {
    // cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr>>LOG2_BLOCK_SIZE);
    // cout << " pf_cl: " << (pf_addr>>LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit << " type: " << +type << endl; });
    if(!cache_hit){
    prefetch_line(ip, addr, pf_addr, FILL_L1, 0);
    prefetch_line(ip, addr, pf_addr1, FILL_L1, 0);
    prefetch_line(ip, addr, pf_addr2, FILL_L1, 0);
    prefetch_line(ip, addr, pf_addr3, FILL_L1, 0);
    prefetch_line(ip, addr, pf_addr4, FILL_L1, 0);
    
    }
    // naman
    // uint64_t block_addr = addr >> LOG2_BLOCK_SIZE;
    // delta = block_addr - prev_addr;
    // prev_addr = block_addr;
    // if (!cache_hit)
    // {
    //     stride_frequency[delta]++;
    //     total_miss_count++;
    // }
    // if (cache_hit)
    // {
    //     hit_count++;
    //     total_count++;
    // }
    // else
    //     total_count++;
    // naman
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_final_stats()
{
    // // naman
    // cout << "-------------------------------------Main Data---------------------------------------" << endl;
    // // cout << "CPU " << cpu << " L1D next line prefetcher final stats" << endl;
    // std::cout << "Number of hits: " << hit_count << std::endl;
    // std::cout << "Number of total accesses: " << total_count << std::endl;
    // std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
    // cout << endl
    //      << endl;
    // cout << "Total miss Count: " << total_miss_count << endl;

    // // Print the pairs from the stride_frequency map
    // std::cout << "Delta Frequency Stats on load miss:" << std::endl;

    // // Use a min-heap to find the top 100 frequencies
    // priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    // for (const auto &pair : stride_frequency)
    // {
    //     min_heap.push(make_pair(pair.second, pair.first));
    //     if (min_heap.size() > 100)
    //     {
    //         min_heap.pop();
    //     }
    // }

    // vector<pair<int64_t, int64_t>> top100;
    // while (!min_heap.empty())
    // {
    //     top100.push_back(min_heap.top());
    //     min_heap.pop();
    // }

    // // Print top 100 frequencies
    // std::cout << "Top 100 Stride Frequencies:" << std::endl;
    // for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    // {
    //     std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_miss_count << std::endl;
    // }

    cout << "got hit in buffer "<< get_hit_in_buffer <<endl;
    cout << "bypassed in LLC or L2C "<< bypassed <<endl;


    // cout << "Top 5 Deltas used are " << delta1 << " "<< delta2 << " "<< delta3 << " "<< delta4 << " "<< delta5 <<endl;

    cout << "-------------------------------------Main Data---------------------------------------" << endl;
    // // naman
}
