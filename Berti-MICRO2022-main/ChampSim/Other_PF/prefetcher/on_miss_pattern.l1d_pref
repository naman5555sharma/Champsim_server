// #include "cache.h"
// #include <unordered_map>
// #include <queue>
// #include <vector>
// #include <cstdint>
// #include <map>
// #include <iostream>
// #include <cassert>
// #include <unordered_set>

// using namespace std;

// static int64_t offset;
// static uint64_t prev_addr;

// static int index1 = 0;

// static uint64_t hit_count = 0;
// static uint64_t total_count = 0;
// static int flag = 0;
// static uint64_t total_miss_count = 0;
// static uint64_t total_count_for_frequency = 0;

// static std::map<int64_t, int64_t> offset_frequency;

// // static uint64_t address[5];
// constexpr int SIZE = 64;
// static std::unordered_set<uint64_t> cl_addresses;

// // void calculate_offset(const std::array<uint64_t, SIZE>& cl_addresses) {
// //     // std::cout << "Differences:" << std::endl;
// //     for (int i = 1; i < SIZE; ++i) {
// //         total_count_for_frequency++;
// //         // std::cout << arr[0] << " - " << arr[i] << " = " << (arr[0] - arr[i]) << std::endl;
// //         int64_t offset = (addresses[i]-addresses[0]);
// //         offset_frequency[offset]++;
// //     }
// // }

// // void shift_and_add_address(std::array<uint64_t, SIZE>& arr, uint64_t new_cl_address) {
// //     // Shift elements to the left
// //     for (int i = 0; i < SIZE - 1; ++i) {
// //         arr[i] = arr[i + 1];
// //     }
// //     // Add new element to the last position
// //     arr[SIZE - 1] = new_address;

// // }

// void CACHE::l1d_prefetcher_initialize()
// {
//     cout << "on_miss_patter" << endl;
// }

// void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
// {
//     assert(addr);
//     total_count++;

//     uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

//     if (cl_addresses.find(cl_addr) != cl_addresses.end())
//     {
//         hit_count++;
//     }

//     uint64_t pf_addr = cl_addr + 1;
//     uint64_t pf_addr = cl_addr + 2;

//     if (cl_addresses.size() >= SIZE)
//     {
//         // Assuming you have logic to evict old addresses if the set is full
//         cl_addresses.erase(*cl_addresses.begin());
//     }
//     cl_addresses.insert(pf_addr);
// }

// void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
// {
// }

// void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
// {
// }
// void print_top_deltas(const std::map<int64_t, int64_t> &delta_frequency, const std::string &title)
// {
//     priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
//     for (const auto &pair : delta_frequency)
//     {
//         min_heap.push(make_pair(pair.second, pair.first));
//         if (min_heap.size() > 100)
//         {
//             min_heap.pop();
//         }
//     }

//     vector<pair<int64_t, int64_t>> top100;
//     while (!min_heap.empty())
//     {
//         top100.push_back(min_heap.top());
//         min_heap.pop();
//     }

//     std::cout << title << std::endl;
//     for (auto it = top100.rbegin(); it != top100.rend(); ++it)
//     {
//         std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_count_for_frequency << std::endl;
//     }
// }
// void CACHE::l1d_prefetcher_final_stats()
// {
//     cout << "-------------------------------------Main Data---------------------------------------" << endl;
//     //     // std::cout << "Number of hits: " << hit_count << std::endl;
//     //     // std::cout << "Number of total accesses: " << total_count << std::endl;
//     //     // std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
//     //     cout << endl
//     //          << endl;

//     //     // cout << "Total miss Count" << total_miss_count << endl;

//     //     // Print the pairs from the stride_frequency map
//     //     std::cout << "Offset Frequency Stats:" << std::endl;

//     //    cout << "----------------------- top 100 -----------------------" << endl;
//     //     print_top_deltas(offset_frequency, "Top 100 offset Frequencies:");

//     cout << "Total hit for size " << SIZE << " is " << hit_count << endl;
//     cout << "Total hit percentage " << SIZE << " is " << static_cast<double>(hit_count) / total_count << endl;
//     cout << "Here next line is used which give 35 % of total miss" << endl;
//     cout << "But here we won't be able to check timelyness" << endl;
//     cout << "-------------------------------------Main Data---------------------------------------" << endl;
// }


#include "cache.h"
#include <unordered_map>
#include <queue>
#include <vector>
#include <cstdint>
#include <map>
#include <iostream>
#include <cassert>
#include <unordered_set>

using namespace std;

static int64_t offset;
static uint64_t prev_addr1;
static uint64_t prev_addr2;

static int index1 = 0;

static uint64_t hit_count = 0;
static uint64_t total_count = 0;
static int flag = 0;
static uint64_t total_miss_count = 0;
static uint64_t total_count_for_frequency = 0;

constexpr int SIZE = 3;


static std::map<std::array<uint64_t, SIZE>, int64_t> pair_frequency;

// static uint64_t address[5];
static std::unordered_set<uint64_t> cl_addresses;

// void calculate_offset(const std::array<uint64_t, SIZE>& cl_addresses) {
//     // std::cout << "Differences:" << std::endl;
//     for (int i = 1; i < SIZE; ++i) {
//         total_count_for_frequency++;
//         // std::cout << arr[0] << " - " << arr[i] << " = " << (arr[0] - arr[i]) << std::endl;
//         int64_t offset = (addresses[i]-addresses[0]);
//         offset_frequency[offset]++;
//     }
// }

// void shift_and_add_address(std::array<uint64_t, SIZE>& arr, uint64_t new_cl_address) {
//     // Shift elements to the left
//     for (int i = 0; i < SIZE - 1; ++i) {
//         arr[i] = arr[i + 1];
//     }
//     // Add new element to the last position
//     arr[SIZE - 1] = new_address;

// }

void CACHE::l1d_prefetcher_initialize()
{
    cout << "on_miss_patter" << endl;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    assert(addr);
    total_count++;

    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    
    if (index1 == 0)
    {
        prev_addr1 = cl_addr;
        index1= 1;
    }
    else{
        prev_addr2 = cl_addr;
        index1 = 0;
    }
    


    if (cl_addresses.size() >= SIZE)
    {
        // Assuming you have logic to evict old addresses if the set is full
        cl_addresses.erase(*cl_addresses.begin());
    }
    cl_addresses.insert(pf_addr);
}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}
void print_top_deltas(const std::map<int64_t, int64_t> &delta_frequency, const std::string &title)
{
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<pair<int64_t, int64_t>>> min_heap;
    for (const auto &pair : delta_frequency)
    {
        min_heap.push(make_pair(pair.second, pair.first));
        if (min_heap.size() > 100)
        {
            min_heap.pop();
        }
    }

    vector<pair<int64_t, int64_t>> top100;
    while (!min_heap.empty())
    {
        top100.push_back(min_heap.top());
        min_heap.pop();
    }

    std::cout << title << std::endl;
    for (auto it = top100.rbegin(); it != top100.rend(); ++it)
    {
        std::cout << "Delta: " << it->second << ", Frequency: " << static_cast<double>(it->first) / total_count_for_frequency << std::endl;
    }
}
void CACHE::l1d_prefetcher_final_stats()
{
    cout << "-------------------------------------Main Data---------------------------------------" << endl;
    //     // std::cout << "Number of hits: " << hit_count << std::endl;
    //     // std::cout << "Number of total accesses: " << total_count << std::endl;
    //     // std::cout << "Percentage of hit: " << (static_cast<double>(hit_count) / total_count) * 100 << std::endl;
    //     cout << endl
    //          << endl;

    //     // cout << "Total miss Count" << total_miss_count << endl;

    //     // Print the pairs from the stride_frequency map
    //     std::cout << "Offset Frequency Stats:" << std::endl;

    //    cout << "----------------------- top 100 -----------------------" << endl;
    //     print_top_deltas(offset_frequency, "Top 100 offset Frequencies:");

    // cout << "Total hit for size " << SIZE << " is " << hit_count << endl;
    // cout << "Total hit percentage " << SIZE << " is " << static_cast<double>(hit_count) / total_count << endl;
    // cout << "Here next line is used which give 35 % of total miss" << endl;
    // cout << "But here we won't be able to check timelyness" << endl;
    cout << "-------------------------------------Main Data---------------------------------------" << endl;
}
