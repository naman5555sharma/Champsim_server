#include "cache.h"
#include <vector>
#include <functional>
#include <utility>
#include <unordered_map>

#define BANK_LENGTH 1000
#define ROUND_MAX 500//100
#define SCORE_MAX 31
#define BAD_SCORE 0
#define NUM_OFFSETS 127//255 //28
#define DELAY_QUEUE_SIZE 15
#define DELAY 60

#define LOW_SCORE 20
#define BW 16
#define MSHR_THRESHOLD 12
#define UPPER_LIMIT 0
#define LOWER_LIMIT 0

//naman
uint64_t prev_addr = 0;

static std::vector<uint64_t> total_offset_count(NUM_OFFSETS, 0);

// static std::vector<int32_t> offsets{ -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 }
// ;
static std::vector<int32_t> offsets{-63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45,
    -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19,
    -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
    static std::vector<uint32_t> offset_freq(NUM_OFFSETS, 0);
    static uint32_t num_accesses = 0;
    static uint32_t num_round = 0;
	static vector<pair<uint64_t, uint64_t>> delay_queue (DELAY_QUEUE_SIZE);
	
    
    static uint32_t curr_dq_size = 0;
	static uint32_t head = 0;
	
    static int64_t curr_offset = -1;
    static uint32_t current_index = 0;

    static uint8_t on_off = 0;

//naman
uint64_t hash1(uint64_t addr)
{
    static std::hash<uint64_t> h1;

    return h1(2 * addr + 7) % BANK_LENGTH;
}

uint64_t hash2(uint64_t addr)
{
    static std::hash<uint64_t> h2;

    return h2(3 * addr + 1) % BANK_LENGTH;
}

// static vector<pair<uint64_t, uint64_t>> delay_queue (DELAY_QUEUE_SIZE);


void CACHE::l1d_prefetcher_initialize() { cout << "CPU " << cpu << " L2C next line prefetcher" << endl; }

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    uint64_t temp_addr = addr;
    addr = addr >> LOG2_BLOCK_SIZE;
    static std::vector<uint64_t> bank1(BANK_LENGTH);
    static std::vector<uint64_t> bank2(BANK_LENGTH);
    
    

    
    // static std::vector<int32_t> offsets{-20, -18, -16, -15, -12, -10, -9, -8, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20};
    //naman
    // static std::vector<int32_t> offsets{ -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 }
;
    // for (int i = -127; i <= 127 ; ++i) {
    // offsets.push_back(i);
    // }
    // static std::vector<int32_t> offsets{-63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45,
    // -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19,
    // -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
    // 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
    // 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
    //naman
    
    
    // static std::vector<uint32_t> offset_freq(NUM_OFFSETS, 0);
    // static uint32_t num_accesses = 0;
    // static uint32_t num_round = 0;

	uint32_t last_fetch_cycle = -1;
	uint32_t rate = 0;	


    
	// static vector<pair<uint64_t, uint64_t>> delay_queue (DELAY_QUEUE_SIZE);
	
    
    // static uint32_t curr_dq_size = 0;
	// static uint32_t head = 0;
	
    // static int64_t curr_offset = -1;
    // static uint32_t current_index = 0;

    // static uint8_t on_off = 0;

    



	uint32_t set = get_set(addr);
	uint32_t way = get_way(addr, set);

	if(cache_hit && !block[set][way].prefetch){
		return ;//metadata_in;	
	}

    //naman 

    // uint64_t find_offset = (addr - (prev_addr >> LOG2_BLOCK_SIZE));
    // cout<< "offset or stride" <<find_offset<<endl;

    // prev_addr = temp_addr;
    //naman

    uint32_t index1 = hash1(addr);
    uint32_t index2 = hash2(addr);

    num_accesses++;

    int32_t offset = offsets.at(current_index);

    uint32_t ind1 = hash1(uint64_t(int64_t(addr) - offset));
    uint32_t ind2 = hash2(uint64_t(int64_t(addr) - offset));

    if (int64_t(bank1.at(ind1)) == int64_t(addr) - offset || int64_t(bank2.at(ind2)) == int64_t(addr) - offset)
    {
        offset_freq.at(current_index)++;
        //naman

        total_offset_count[current_index]++;  // Increment the total count for this offset

        //naman

    }

    current_index = (current_index + 1) % NUM_OFFSETS;

    uint32_t max_freq = 0;
    uint32_t indx;

    for (uint32_t i = 0; i < NUM_OFFSETS; ++i)
    {
        if (offset_freq.at(i) >= max_freq)
        {
            max_freq = offset_freq.at(i);
            indx = i;
        }
    }

    if (num_accesses == NUM_OFFSETS)
    {   
        num_accesses = 0;
        num_round++;
    }


    //naman
    // curr_offset = offsets.at(indx);


    if (max_freq >= SCORE_MAX || num_round >= ROUND_MAX)
    {
        curr_offset = offsets.at(indx);
        offset_freq.assign(NUM_OFFSETS, 0);
        num_accesses = 0;
        num_round = 0;
    }
	
	on_off = 1;
    if(max_freq <= BAD_SCORE){
        on_off = 0;
    }

    bank1.at(index1) = addr;
	
	uint64_t current_cycle = current_core_cycle[0];

	if(curr_dq_size < DELAY_QUEUE_SIZE){
		delay_queue.at(head) = make_pair(addr, current_cycle);
		head = (head+1)%DELAY_QUEUE_SIZE;
		curr_dq_size++;
	}		
	
	uint32_t h = head;
	uint32_t sz = curr_dq_size;
	
    for(uint32_t i=0; i<sz; ++i){
		if(current_cycle - delay_queue.at((i+h)%DELAY_QUEUE_SIZE).second >= DELAY){
			uint32_t indd = hash2(delay_queue.at((i+h)%DELAY_QUEUE_SIZE).first);
			bank2.at(indd) = hash2(delay_queue.at((i+h)%DELAY_QUEUE_SIZE).first);

			head = (head+1)%DELAY_QUEUE_SIZE;
			curr_dq_size --;
		}	
	}	

    if (type != LOAD)
        return ; //metadata_in;

    uint64_t pf_addr = ((temp_addr >> LOG2_BLOCK_SIZE) + curr_offset) << LOG2_BLOCK_SIZE;

    DP(if (warmup_complete[cpu]) {
        cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr >> LOG2_BLOCK_SIZE);
        cout << " pf_cl: " << (pf_addr >> LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit
             << " type: " << +type << endl;
    });
	
    if (on_off)
    {
        prefetch_line(ip, temp_addr, pf_addr, FILL_L1, 0);
    }

    return ; //metadata_in;
}

void CACHE::l1d_prefetcher_cache_fill(
    uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
    return ;//metadata_in;
}

void CACHE::l1d_prefetcher_final_stats() 
{
    cout << "CPU " << cpu << " L1d next line prefetcher final stats" << endl; 

    //naman
        static std::vector<int32_t> offsets;
    for (int i = -63; i <= 63; ++i) {
    offsets.push_back(i);
    }
    std::cout<<endl;
    // Print the total count for each offset
    for (uint32_t i = 0; i < NUM_OFFSETS; ++i)
    {
        std::cout << offsets[i]<< "," << total_offset_count[i] << std::endl;
    }

    //naman

}