#include "cache.h"

#include <map>
#include <algorithm>

// #define offset_numbers_count 20001
#define access_interval 512
#define trace_total_count 5000

static long long int trace_count = 0;
static int potential_count = 1;
static std::vector<int64_t> offsets;
// for (int i = -10000; i <= 10000; ++i)
// {
//     offsets.push_back(i);
// }

static std::vector<int> arm_n_count;

static uint64_t n_total = 0;

static std::vector<int32_t> reward;

static std::vector<int64_t> rr(access_interval);
static std::vector<int64_t> pf(access_interval);

static std::vector<double> potential;

static uint32_t access_index = 0;
static uint64_t offsets_index = 0;
static int sanity = 0;

static uint64_t prev_addr;

void CACHE::l1d_prefetcher_initialize()
{
    // static std::vector<int64_t> offsets;
    for (int i = -63; i <= 63; ++i)
    {
        if (i != 0)
            offsets.push_back(i);
    }
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{

    // Assert that the address is non-negative
    assert(addr >= 0);
    uint64_t temp_addr;

    static int64_t best_arm = 0;
    static int64_t num_pref = 0;
    static int64_t count = 0;

    temp_addr = addr >> LOG2_BLOCK_SIZE;
    /*-----------------------------------------------------------------------------------------------
    --------------------------------------MAIN LOOP PHASE--------------------------------------------
    ------------------------------------------------------------------------------------------------*/

    if (offsets_index >= offsets.size())
    {

        temp_addr = addr >> (LOG2_BLOCK_SIZE);
        int64_t stride;
        stride = temp_addr - prev_addr;

        prev_addr = temp_addr;
        static size_t maxIndex = 0;

        if (sanity == 0)
        {
            // Print all elements of the vector
            std::cout << "Offsets elements: ";
            for (const auto &element : offsets)
            {
                std::cout << element << " ";
            }
            std::cout << std::endl;

            std::cout << "Potential of Offsets elements: ";
            for (const auto &element : potential)
            {
                std::cout << element << " ";
            }
            std::cout << std::endl;

            std::cout << "Reward of Offsets elements: ";
            for (const auto &element : reward)
            {
                std::cout << element << " ";
            }
            std::cout << std::endl;

            sanity++;
            std::cout << "Printing Sanity" << sanity << std::endl;
            int access_index = 0;
        }

        int c = 6;

        int n_arms = reward.size();

        if (potential_count == 1)
        {
            for (int i = 0; i < n_arms; ++i)
            {

                double bonus = c * sqrt(2 * log(n_total) / (arm_n_count[i]));
                potential.push_back(reward[i] + bonus);
            }

            n_total++;
            potential_count = 0;
            // Find the iterator to the maximum element
            auto maxElementIterator = std::max_element(potential.begin(), potential.end());

            // Find the index of the maximum element
            maxIndex = std::distance(potential.begin(), maxElementIterator);
            arm_n_count[maxIndex]++;
            best_arm = offsets[maxIndex];

            std::cout << "BEST ARM : " << best_arm << std::endl;
        }

        if (potential_count == 2)
        {
            for (int i = 0; i < n_arms; ++i)
            {
                double bonus = c * sqrt(2 * log(n_total) / (arm_n_count[i]));
                potential[i] = (reward[i] + bonus);
            }

            n_total++;
            potential_count = 0;
            // Find the iterator to the maximum element
            auto maxElementIterator = std::max_element(potential.begin(), potential.end());

            // Find the index of the maximum element
            size_t maxIndex = std::distance(potential.begin(), maxElementIterator);
            arm_n_count[maxIndex]++;
            // std::cout << "max index arm n count" << arm_n_count[maxIndex] << std::endl;
            best_arm = offsets[maxIndex];
            std::cout << "BEST ARM : " << best_arm << std::endl;
        }

        rr[access_index] = temp_addr;
        uint64_t prefetch_addr = temp_addr + best_arm;

        pf[access_index] = prefetch_addr;
        prefetch_addr = prefetch_addr << LOG2_BLOCK_SIZE;

        if (access_index == 511)
        {

            int countSame = 0;

            for (size_t i = 0; i < rr.size(); ++i)
            {
                for (size_t j = 0; j < pf.size(); j++)
                {
                    if (rr[i] == pf[j])
                    {
                        countSame++;
                    }
                }
            }
            reward[maxIndex] = (reward[maxIndex] * (arm_n_count[maxIndex] - 1) + countSame) / arm_n_count[maxIndex];
            access_index = 0;
            potential_count = 2;
            std::cout << "\n"
                      << std::endl;

            std::cout << "Number of prefetches: " << num_pref << std::endl;
            std::cout << "Stride = Best arm: " << count << std::endl;
            num_pref = 0;
        }
        access_index = (access_index + 1) % access_interval;

        std::cout << "Cycle: " << current_core_cycle[0] << " Block Addr: " << temp_addr << " Stride: " << stride << " Cache hit: " << (cache_hit ? 1 : 0) << std::endl;
        if (stride == best_arm)
        {
            count++;
        }

        if (best_arm != 0)
        {
            if (stride < 1000 && stride > -1000)
            {
                num_pref++;
                prefetch_line(ip, addr, prefetch_addr, FILL_L1, 0);
            }
        }
        return; // forget to put in starting
    }
    /*-----------------------------------------------------------------------------------------------
    --------------------------------------ROUND ROBIN PHASE------------------------------------------
    ------------------------------------------------------------------------------------------------*/
    int64_t arm;

    rr[access_index] = temp_addr;

    arm = offsets[offsets_index];

    uint64_t prefetch_addr = temp_addr + arm;
    prev_addr = temp_addr;

    pf[access_index] = prefetch_addr;
    prefetch_addr = prefetch_addr << LOG2_BLOCK_SIZE;

    if (access_index == 511)
    {

        arm_n_count.push_back(1);

        n_total++;

        int countSame = 0;

        // Compare each entry in the vectors
        for (size_t i = 0; i < rr.size(); ++i)
        {
            for (size_t j = 0; j < pf.size(); j++)
            {
                if (rr[i] == pf[j])
                {
                    countSame++;
                }
            }
        }

        reward.push_back(countSame);

        offsets_index = offsets_index + 1;
    }

    access_index = (access_index + 1) % access_interval;
    return;
}

void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{

#ifdef TRACE_DUMP
    cout << "FILL:  CL Addr: " << (addr >> LOG2_BLOCK_SIZE) << "  Prefetch: " << unsigned(prefetch) << "  Cycle: " << current_core_cycle[cpu] << endl;
#endif
}

void CACHE::l1d_prefetcher_final_stats()
{
    std::cout << "ucb ended" << endl;
    std::cout << "----------------------------------------------------------------------------------------------"
              << "-------------------------------------------------------------------------------------------------------"
              << endl;

    // Print all elements of the vector
    std::cout << "Offsets elements: ";
    for (const auto &element : offsets)
    {
        std::cout << element << " ";
    }
    std::cout << std::endl;

    std::cout << "Potential of Offsets elements: ";
    for (const auto &element : potential)
    {
        std::cout << element << " ";
    }
    std::cout << std::endl;

    std::cout << "rewards of Offsets elements: ";
    for (const auto &element : reward)
    {
        std::cout << element << " ";
    }
    sanity++;
    std::cout << "Printing Sanity" << sanity << std::endl;
    std::cout << "offset_index value" << offsets_index << std::endl;
    std::cout << "offset list size" << offsets.size() << std::endl;
    std::cout << "reward size" << reward.size() << std::endl;
    std::cout << "potential size" << potential.size() << std::endl;
    std::cout << "----------------------------------------------------------------------------------------------"
              << "-------------------------------------------------------------------------------------------------------"
              << endl;
}
